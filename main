#!/usr/bin/env node

//npm init - will create package.json that has info about the our project(bio-data)
//package-lock.json will tell about the dependencies
//fs - file system

//global commands are saved in environment variables
//npm run wcat
//npm link/unlink




const fs = require("fs");
let arguments = process.argv.slice(2); //arguments are fetched

//segregating files and filenames
let flags = [];
let filenames = [];

//for providing special characters or removing them
let secondaryArguments = [];

for(let i of arguments){
    //all flgas will start from hyphen
    if(i[0] == "-"){
        flags.push(i); //pushing flags in the array as we can have more than 1 flags
    }else if(i[0] == "%"){
        //remove the %
        secondaryArguments.push(i.slice(1));
    }
    else{
        filenames.push(i); //pushing jfilenames in the array
    }
}

//console.log(secondaryArguments);


//For single flag- non optimized logic

// if(flags.length == 0 && filenames.length!=0){
//     for(let file of filenames){
//         console.log(fs.readFileSync(file, "utf-8"));
//     }
// } else {
//     for(let flag of flags){
//         if(flag == "-rs"){
//             for(let file of filenames){
//                 let fileData = fs.readFileSync(file, "utf-8");
//                 let fileDataArray = fileData.split(" ").join("");
//                 console.log(fileDataArray);
//             }
//         }
//     }
// }


//1. -rs remove all the spaces in the file
//2. \r\n for new line -rn remove new line
//3. -rsc remove special characters
//4. -w write in the file

//OPTIMIZED CODE
for(let file of filenames){
    let fileData =fs.readFileSync(file, "utf-8");
    for(let flag of flags){
        if(flag == "-rs"){
            fileData = removeAll(fileData, " ");
        }
        if(flag == "-rn"){
            fileData = removeAll(fileData, "\r\n");
        }
        if(flag == "-rsc"){
            for(let secondaryArgument of secondaryArguments){
                fileData = removeAll(fileData, secondaryArgument);
            }
        }
        if(flag == "-s"){
            let data = addSequence(fileData);
            console.log(data);
        }

        if(flag == "-sn"){
            let data = addSequenceLine(fileData);
            console.log(data);
        }

        if(flag == "-rel"){
            let data = removeExtraLine(fileData);
            console.log(data);
        }
    }

    //always print in the last
    console.log(fileData);
}

function removeAll(string, removalData){
    return string.split(removalData).join("");
}


function addSequence(content){
    let contentArr = content.split("\r\n");
    for(let i=0; i < contentArr.length; i++){
        contentArr[i] = (i+1) + " " + contentArr[i];
    }

    return contentArr;
}

function addSequenceLine(content){
    let contentArr = content.split("\r\n");
    let count = 0;
    for(let i=0; i < contentArr.length; i++){
        if(contentArr[i] != ""){
            contentArr[i] = count + " " + contentArr[i];
            count++;
        }  
    }

    return contentArr;
}

function removeExtraLine(content){
    let contentArr = content.split("\r\n");
    // for(let i = 0; i <contentArr.length; i++){
    //     if(contentArr[i+2] == ""){
    //         contentArr.splice(i+2, 1);
    //     }
    // }

    let data = [];
    for(let i = 1; i < contentArr.length; i++){
        if(contentArr[i] == "" && contentArr[i-1] == ""){
            contentArr[i] = null;
        }
        if(contentArr[i] == "" && contentArr[i-1] == null){
            contentArr[i] = null;
        }
    }

    for(let i = 0 ; i<contentArr.length; i++){
        if(contentArr[i]!=null){
            data.push(contentArr[i]);
        }
    }

    return data;
}